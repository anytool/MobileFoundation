var workspace   = require("ANYWorkspace");
var __rN        = require("ReactNative");
var qs          = require("QueryString");
/* a:instance, b:callbacks */
module.exports  = function(a, b) {
    // get id and parse props
    var id = a.__props.rActId || "", props = (a.__props.rProps || "").split("&").filter(function(n){return n});
    // process props
    for (var i in props) {
        var prop = props[i].split("=");
        prop[1] = a.data(prop[1]);
        props[i] = prop.join("=");
    }
    props = props.length ? qs.parse(props.join("&")) : {};
    // node exists
    if ((workspace.aliases[id] || []).length) {
        // get exactly id
        id = workspace.aliases[id][workspace.aliases[id].length - 1];
        // get closest view
        var viewId = workspace.views[id] ? id : workspace.tree[id].paths.view[workspace.tree[id].paths.view.length - 1];
        // reload view
        if (id == viewId) {
            // get view
            var view = workspace.views[viewId].doms.instances[workspace.views[viewId].doms.current];
            // update view
            view.setState && view.setState(props, function() {
                this.active();
                b && b();
            });
        // reload action
        } else {
            // get class
            var cls = workspace.tree[id].class;
            // get instance
            var instance = workspace.tree[id].instance;
            // get caller
            var caller = instance.__caller;
            // get ids that need to clear
            var ids = [], getChildIds = function(nId, trigger) {
                ids.unshift([trigger, nId]);
                if (workspace.tree[nId]) {
                    for (var t in workspace.tree[nId].childs) {
                         for (var cIdx in workspace.tree[nId].childs[t]) {
                             getChildIds(workspace.tree[nId].childs[t][cIdx], t);
                         }
                    }
                }
            };
            // get child ids
            getChildIds(id, instance.__trigger);
            // delete child nodes
            for (var i in ids) {
                // get parent id
                var parentId = workspace.tree[ids[i][1]].paths.node[workspace.tree[ids[i][1]].paths.node.length - 1];
                // parent node exists
                if (parentId) {
                    // get child index
                    var idx = (((workspace.tree[parentId] || {}).childs || {})[ids[i][0]] || []).indexOf(ids[i][1]);
                    // delete instance from parent
                    if (idx >= 0) workspace.tree[parentId].childs[ids[i][0]].splice(idx, 1);
                    // delete node
                    delete workspace.tree[ids[i][1]];
                }
                // get parent id
                parentId = (workspace.views[ids[i][1]] || {}).parent;
                // parent view exists
                if (parentId) {
                    // get child index
                    var idx = ((workspace.views[parentId] || {}).childs || []).indexOf(ids[i][1]);
                    // delete instance from parent
                    if (idx >= 0) workspace.views[parentId].childs.splice(idx, 1);
                    // delete node
                    delete workspace.views[ids[i][1]];
                }
            }
            // reload
            new (Function.prototype.bind.call(cls, caller, props));
            // callback
            b && b();
        }
    }
};