var workspace   = require("ANYWorkspace");
var __rN        = require("ReactNative");
var qs          = require("QueryString");
/* a:instance, b:callbacks */
module.exports  = function(a, b) {
    // get id and parse props
    var id = a.__props.rActId || "", props = (a.__props.rProps || "").split("&").filter(function(n){return n});
    // process props
    for (var i in props) {
        var prop = props[i].split("=");
        prop[1] = a.data(prop[1]);
        props[i] = prop.join("=");
    }
    props = props.length ? qs.parse(props.join("&")) : {};
    // node exists
    if ((workspace.aliases[id] || []).length) {
        // get exactly id
        id = workspace.aliases[id][workspace.aliases[id].length - 1];
        // get closest view
        var viewId = workspace.views[id] ? id : workspace.tree[id].paths.view[workspace.tree[id].paths.view.length - 1];
        // reload view
        if (id == viewId) {
            // get view
            var view = workspace.views[viewId].doms.instances[workspace.views[viewId].doms.current];
            // update view
            view.setState && view.setState(props, function() {
                this.active();
                b && b();
            });
        // reload action
        } else {
            // get instance
            var instance = workspace.tree[id].instance;
            // get ids that need to clear
            var ids = [], getChilds = function(currentId) {
                if (workspace.tree[currentId]) {
                    for (var trigger in workspace.tree[currentId].childs) {
                         for (var childIdx in workspace.tree[currentId].childs) {
                             getChildIds(workspace.tree[currentId].childs[childIdx]);
                         }
                    }
                }
            };
            getChildIds(id);
            // delete child nodes
            console.log("[debug] delete: ", ids);

            


            // get parent id
            var parentId = workspace.tree[id].paths.node[workspace.tree[id].paths.node.length - 1];
            // get child index
            var idx = (((workspace.tree[parentId] || {}).childs || {})[instance.__trigger] || []).indexOf(id);
            // delete instance from parent
            if (idx >= 0) workspace.tree[parentId].childs[instance.__trigger].splice(idx, 1);



            // reload
            new (Function.prototype.bind.call(workspace.tree[id].class, instance.__caller, props));
            // callback
            b && b();
        }
    }
};