var workspace   = require("ANYWorkspace");
var __rN        = require("ReactNative");
var Base64      = require("Base64");
var qs          = require("QueryString");
var Network     = require(10019);
/* d:instance, t:callbacks */
module.exports  = function(d, t) {
    var g = {
        url     : d.__props.url || "",
        method  : {
            READ    : "GET",
            CREATE  : "POST",
            UPDATE  : "PUT",
            DELETE  : "DELETE"
        }[(d.__props.type||"GET").toUpperCase()],
        headers : {
            "Content-Type":{
                json        : "application/json",
                querystring : "application/x-www-form-urlencoded"
            }[(d.__props.format||"querystring").toLowerCase()]
        }
    };
    // process form data
    g.body = /^application\/json$/i.test(g.headers['Content-Type']) ? JSON.stringify(qs.parse(d.__props.formData)) : d.__props.formData;
    // setup response handler
    var responseHandler = function(status, body) {
        // get closest view id
        //var closestViewId = workspace.tree[d.__caller.__id].paths.view[workspace.tree[d.__caller.__id].paths.view.length - 1];
        //console.log("[debug] check reloaded view:", closestViewId, (workspace.views[closestViewId] || {}).type);
        console.log("[debug] check reloaded view:", typeof d.__caller, (workspace.tree[(d.__caller || {}).__id] || {}).paths.view);



        // save data
        d.data(d.__props.alias, body);
        // get closest view
        var view = d.dom();
        // reload view
        view ? view.setState({}, function() {
            // callback
            t[status] && t[status]();
        // callback directly
        }) : t[status] && t[status]();
    };
    // make request
    Network(g, {
        succeeded   : function(res) { responseHandler('succeeded', res) },
        failed      : function(res) { responseHandler('failed', res) }
    });
};