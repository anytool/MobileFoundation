var workspace   = require("ANYWorkspace");
var __rN        = require("ReactNative");
var Base64      = require("Base64");
var qs          = require("QueryString");
var Network     = require(10019);
/* d:instance, t:callbacks */
module.exports  = function(d, t) {
    var g = {
        url     : d.__props.url || "",
        method  : {
            READ    : "GET",
            CREATE  : "POST",
            UPDATE  : "PUT",
            DELETE  : "DELETE"
        }[(d.__props.type||"GET").toUpperCase()],
        headers : null
    }, vars = {
        headers : "reqHds",
        body    : "formData"
    };
    // process variable
    for (var type in vars) {
        // process header data
        g[type] = (d.__props[vars[type]] || "").split("&").filter(function(n){return n});
        // process headers
        for (var i in g[type]) {
            var hd = g[type][i].split("=");
            hd[1] = d.data(hd[1]);
            g[type][i] = hd.join("=");
        }
        g[type] = g[type].join("&");
    }
    // convert headers to object
    g.headers = qs.parse(g.headers);
    // set required header data
    g.headers["Content-Type"] = {
        json        : "application/json",
        querystring : "application/x-www-form-urlencoded"
    }[(d.__props.format||"querystring").toLowerCase()];
    // convert form data format to json format
    if (/^application\/json$/i.test(g.headers['Content-Type'])) g.body = JSON.stringify(qs.parse(g.body));
    // setup response handler
    var responseHandler = function(status, body) {
        // save data
        d.data(d.__props.alias, body);
        // get closest view
        var view = d.dom(true);
        // reload view
        view ? view.setState({}, function() {
            // callback
            t[status] && t[status]();
        // callback directly
        }) : t[status] && t[status]();
    };
    // make request
    Network(g, {
        succeeded   : function(res) { responseHandler('succeeded', res) },
        failed      : function(res) { responseHandler('failed', res) }
    });
};